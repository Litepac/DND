@page "/"
@inject HttpClient Http
@using System.Net.Http.Json

<h3 class="mb-3">Stena – Dashboard (pilot)</h3>

@if (loading)
{
    <p>Henter data…</p>
}
else
{
    <div class="row g-3 mb-4">
        <div class="col-sm-6 col-md-3">
            <div class="kpi-card">
                <div class="text-muted">Antal containere</div>
                <div class="fs-3 fw-bold">@count</div>
            </div>
        </div>
        <div class="col-sm-6 col-md-3">
            <div class="kpi-card">
                <div class="text-muted">Gns. seneste fyld%</div>
                <div class="fs-3 fw-bold">@avgFill.ToString("0")%</div>
            </div>
        </div>
        <div class="col-sm-6 col-md-3">
            <div class="kpi-card">
                <div class="text-muted">Ugentlig mængde (kg)</div>
                <div class="fs-3 fw-bold">@totalWeekly.ToString("0")</div>
            </div>
        </div>
        <div class="col-sm-6 col-md-3">
            <div class="kpi-card">
                <div class="text-muted">Foreslået frekvens (gns.)</div>
                <div class="fs-3 fw-bold">@avgSuggestedDays d.</div>
            </div>
        </div>
    </div>

    <div class="row g-3">
        <div class="col-lg-6">
            <div class="card shadow-sm">
                <div class="card-header bg-light fw-semibold">Underfyldte (foreslå sjældnere afhentning)</div>
                <div class="card-body p-0">
                    <table class="table table-striped table-hover align-middle mb-0">
                        <thead>
                            <tr>
                                <th>Id</th>
                                <th>Type</th>
                                <th>Seneste fyld%</th>
                                <th>Forslag</th>
                            </tr>
                        </thead>
                        <tbody>
                        @foreach (var r in Underfilled())
                        {
                            <tr>
                                <td>@r.C.Id</td>
                                <td>@r.C.Type</td>
                                <td>@(r.C.LastFillPct?.ToString("0") ?? "-")</td>
                                <td><span class="badge bg-success">@r.SuggestedDays d.</span></td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="col-lg-6">
            <div class="card shadow-sm">
                <div class="card-header bg-light fw-semibold">Overfyldte (foreslå hyppigere afhentning)</div>
                <div class="card-body p-0">
                    <table class="table table-striped table-hover align-middle mb-0">
                        <thead>
                            <tr>
                                <th>Id</th>
                                <th>Type</th>
                                <th>Seneste fyld%</th>
                                <th>Forslag</th>
                            </tr>
                        </thead>
                        <tbody>
                        @foreach (var r in Overfilled())
                        {
                            <tr>
                                <td>@r.C.Id</td>
                                <td>@r.C.Type</td>
                                <td>@(r.C.LastFillPct?.ToString("0") ?? "-")</td>
                                <td><span class="badge bg-danger">@r.SuggestedDays d.</span></td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <div class="mt-3">
        <NavLink class="btn btn-outline-primary" href="containers">Gå til containere</NavLink>
    </div>
}

@code {
    bool loading = true;
    List<ContainerDto> items = new();

    public record ContainerDto(
        int Id, string Type, int SizeLiters, double WeeklyAmountKg,
        double? LastFillPct, DateTime? LastPickupDate,
        int? PreferredPickupFrequencyDays, int? CustomerId, int Material);

    int count => items.Count;
    double totalWeekly => items.Sum(c => c.WeeklyAmountKg);
    double avgFill => items.Count == 0
        ? 0
        : items.Where(c => c.LastFillPct.HasValue).DefaultIfEmpty().Average(c => c?.LastFillPct ?? 0);

    static int RecommendDays(double? lastFill) => lastFill switch
    {
        > 90 => 7,
        < 50 => 21,
        _   => 14
    };

    int avgSuggestedDays => items.Count == 0 ? 0
        : (int)Math.Round(items.Select(c => RecommendDays(c.LastFillPct)).Average());

    record Row(ContainerDto C, int SuggestedDays);

    IEnumerable<Row> Underfilled() =>
        items.Where(c => (c.LastFillPct ?? 0) < 50)
             .OrderBy(c => c.LastFillPct ?? 0)
             .Take(5)
             .Select(c => new Row(c, RecommendDays(c.LastFillPct)));

    IEnumerable<Row> Overfilled() =>
        items.Where(c => (c.LastFillPct ?? 0) > 90)
             .OrderByDescending(c => c.LastFillPct ?? 0)
             .Take(5)
             .Select(c => new Row(c, RecommendDays(c.LastFillPct)));

    protected override async Task OnInitializedAsync()
    {
        items = await Http.GetFromJsonAsync<List<ContainerDto>>("api/containers") ?? new();
        loading = false;
    }
}
