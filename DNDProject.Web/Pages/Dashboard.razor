@page "/"
@inject HttpClient Http
@using System.Net.Http.Json

<h3 class="mb-3">Stena – Dashboard (pilot)</h3>

@if (error is not null)
{
    <div class="alert alert-danger">@error</div>
}
else if (items is null)
{
    <p>Henter data…</p>
}
else
{
    <!-- Toolbar: grænser + refresh -->
    <div class="d-flex flex-wrap gap-4 align-items-end mb-3">
        <div style="min-width:220px">
            <label class="form-label">Overfyldt grænse (@over.ToString("0")%)</label>
            <input class="form-range" type="range" min="60" max="100" step="1" @bind="over" />
        </div>
        <div style="min-width:220px">
            <label class="form-label">Underfyldt grænse (@under.ToString("0")%)</label>
            <input class="form-range" type="range" min="0" max="80" step="1" @bind="under" />
        </div>
        <button class="btn btn-sm btn-outline-secondary" @onclick="Reload">Opdater</button>
        <div class="ms-auto text-muted small">Sidst opdateret: @lastLoaded.ToString("HH:mm:ss")</div>
    </div>

    <div class="row g-3 mb-4">
        <div class="col-sm-6 col-md-3">
            <div class="kpi-card">
                <div class="text-muted">Antal containere</div>
                <div class="fs-3 fw-bold">@count</div>
            </div>
        </div>

        <div class="col-sm-6 col-md-3">
            <div class="kpi-card">
                <div class="text-muted">Gns. seneste fyld%</div>
                <div class="fs-3 fw-bold">@avgFill.ToString("0")%</div>
            </div>
        </div>

        <div class="col-sm-6 col-md-3">
            <div class="kpi-card">
                <div class="text-muted">Ugentlig mængde (kg)</div>
                <div class="fs-3 fw-bold">@totalWeekly.ToString("0")</div>
            </div>
        </div>

        <div class="col-sm-6 col-md-3">
            <div class="kpi-card">
                <div class="text-muted">Foreslået frekvens (gns.)</div>
                <div class="fs-3 fw-bold">
                    <span class="badge @BadgeClass(avgSuggestedDays)" style="font-size:1rem">
                        @avgSuggestedDays d.
                    </span>
                </div>
            </div>
        </div>
    </div>

    <div class="row g-3">
        <!-- Underfyldte -->
        <div class="col-lg-6">
            <div class="card shadow-sm">
                <div class="card-header bg-light fw-semibold">
                    Underfyldte (foreslå sjældnere afhentning)
                </div>
                <div class="card-body p-0">
                    <table class="table table-striped table-hover align-middle mb-0">
                        <thead>
                            <tr>
                                <th>Id</th>
                                <th>Type</th>
                                <th>Seneste fyld%</th>
                                <th>Forslag</th>
                                <th>Handling</th>
                            </tr>
                        </thead>
                        <tbody>
                        @if (!Underfilled().Any())
                        {
                            <tr><td colspan="5" class="text-muted p-3">Ingen underfyldte lige nu.</td></tr>
                        }
                        else
                        {
                            @foreach (var r in Underfilled())
                            {
                                <tr>
                                    <td>@r.C.Id</td>
                                    <td>@r.C.Type</td>
                                    <td>@(r.C.LastFillPct?.ToString("0") ?? "-")</td>
                                    <td>
                                        <span class="badge @BadgeClass(r.SuggestedDays)">@r.SuggestedDays d.</span>
                                    </td>
                                    <td>
                                        <NavLink class="btn btn-sm btn-outline-secondary"
                                                 href="@($"/containers/{r.C.Id}/history")">
                                            Historik
                                        </NavLink>
                                    </td>
                                </tr>
                            }
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Overfyldte -->
        <div class="col-lg-6">
            <div class="card shadow-sm">
                <div class="card-header bg-light fw-semibold">
                    Overfyldte (foreslå hyppigere afhentning)
                </div>
                <div class="card-body p-0">
                    <table class="table table-striped table-hover align-middle mb-0">
                        <thead>
                            <tr>
                                <th>Id</th>
                                <th>Type</th>
                                <th>Seneste fyld%</th>
                                <th>Forslag</th>
                                <th>Handling</th>
                            </tr>
                        </thead>
                        <tbody>
                        @if (!Overfilled().Any())
                        {
                            <tr><td colspan="5" class="text-muted p-3">Ingen overfyldte lige nu.</td></tr>
                        }
                        else
                        {
                            @foreach (var r in Overfilled())
                            {
                                <tr>
                                    <td>@r.C.Id</td>
                                    <td>@r.C.Type</td>
                                    <td>@(r.C.LastFillPct?.ToString("0") ?? "-")</td>
                                    <td>
                                        <span class="badge @BadgeClass(r.SuggestedDays)">@r.SuggestedDays d.</span>
                                    </td>
                                    <td>
                                        <NavLink class="btn btn-sm btn-outline-secondary"
                                                 href="@($"/containers/{r.C.Id}/history")">
                                            Historik
                                        </NavLink>
                                    </td>
                                </tr>
                            }
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <div class="mt-3">
        <NavLink class="btn btn-outline-primary" href="containers">Gå til containere</NavLink>
    </div>
}

@code {
    // --- data + fejltilstand ---
    string? error;
    List<ContainerDto>? items;

    // Standardgrænser (bruges som defaults ved load)
    const double DefaultOver = 80;
    const double DefaultUnder = 50;

    // Grænser som kan justeres i UI
    double over = DefaultOver;
    double under = DefaultUnder;

    // Sidst opdateret
    DateTime lastLoaded;

    public record ContainerDto(
        int Id, string Type, int SizeLiters, double WeeklyAmountKg,
        double? LastFillPct, DateTime? LastPickupDate,
        int? PreferredPickupFrequencyDays, int? CustomerId, int Material);

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    async Task Load()
    {
        try
        {
            items = await Http.GetFromJsonAsync<List<ContainerDto>>("api/containers");
            lastLoaded = DateTime.Now;
            error = null;
        }
        catch (Exception ex)
        {
            error = $"Kan ikke hente data fra API'et. Tjek at API kører og at base-URL er korrekt. ({ex.Message})";
            items = new();
        }
    }

    Task Reload() => Load();

    // KPI'er
    int count => items?.Count ?? 0;
    double totalWeekly => items?.Sum(c => c.WeeklyAmountKg) ?? 0;

    // Gns. seneste fyld%
    double avgFill => (items?.Count ?? 0) == 0
        ? 0
        : items!
            .Where(c => c.LastFillPct.HasValue)
            .Select(c => c.LastFillPct!.Value)
            .DefaultIfEmpty(0)
            .Average();

    // Simpel anbefaling baseret på seneste fyld%
    static int RecommendDays(double? lastFill, double over, double under)
    {
        var x = lastFill ?? 0;
        if (x > over) return 7;
        if (x < under) return 21;
        return 14;
    }

    int avgSuggestedDays => (items?.Count ?? 0) == 0 ? 0
        : (int)Math.Round(items!
            .Select(c => RecommendDays(c.LastFillPct, over, under))
            .Average());

    // Rækker til listerne
    record Row(ContainerDto C, int SuggestedDays);

    IEnumerable<Row> Underfilled() =>
        (items ?? Enumerable.Empty<ContainerDto>())
            .Where(c => (c.LastFillPct ?? 0) < under)
            .OrderBy(c => c.LastFillPct ?? 0)
            .Take(5)
            .Select(c => new Row(c, RecommendDays(c.LastFillPct, over, under)));

    IEnumerable<Row> Overfilled() =>
        (items ?? Enumerable.Empty<ContainerDto>())
            .Where(c => (c.LastFillPct ?? 0) > over)
            .OrderByDescending(c => c.LastFillPct ?? 0)
            .Take(5)
            .Select(c => new Row(c, RecommendDays(c.LastFillPct, over, under)));

    // Badge-farver efter forslag
    static string BadgeClass(int days) => days switch
    {
        <= 7  => "bg-danger",
        <= 14 => "bg-warning",
        _     => "bg-success"
    };
}
