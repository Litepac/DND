@page "/login"
@using System.Net.Http.Json
@inject HttpClient Http
@inject DNDProject.Web.Services.ITokenStorage Tokens

<h3>Login</h3>

@if (ok) { <div class="alert alert-success">Login OK – token gemt.</div> }
@if (!string.IsNullOrWhiteSpace(error))
{
    <div class="alert alert-danger">@error</div>
}

<EditForm Model="@model" OnValidSubmit="@HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Email</label>
        <InputText class="form-control" @bind-Value="model.Email" />
    </div>

    <div class="mb-3">
        <label>Password</label>
        <InputText class="form-control" Type="password" @bind-Value="model.Password" />
    </div>

    <button class="btn btn-primary" disabled="@busy">Log ind</button>
    <button type="button" class="btn btn-outline-secondary ms-2" @onclick="Logout">Log ud</button>
</EditForm>

@if (!string.IsNullOrWhiteSpace(currentToken))
{
    <details class="mt-3">
        <summary>Token</summary>
        <textarea class="form-control" rows="4" readonly>@currentToken</textarea>
    </details>
}

@code {
    bool busy, ok;
    string? error;
    string? currentToken;

    // simple model
    LoginRequest model = new() { Email = "admin@demo.local", Password = "Pass123!" };

    class LoginRequest
    {
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
    }

    // svar fra API
    record LoginResponse(string Token, DateTime Expires, string Email, IEnumerable<string> Roles, int? CustomerId);

    protected override async Task OnInitializedAsync()
        => currentToken = await Tokens.GetAsync();

    async Task HandleLogin()
    {
        error = null; ok = false; busy = true;
        try
        {
            var resp = await Http.PostAsJsonAsync("api/auth/login", model);
            if (!resp.IsSuccessStatusCode)
            {
                error = $"Login fejlede ({(int)resp.StatusCode})";
                return;
            }

            var dto = await resp.Content.ReadFromJsonAsync<LoginResponse>();
            if (dto is null)
            {
                error = "Kunne ikke læse svar fra serveren.";
                return;
            }

            await Tokens.SaveAsync(dto.Token);
            currentToken = dto.Token;
            ok = true;
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally { busy = false; }
    }

    async Task Logout()
    {
        await Tokens.ClearAsync();
        currentToken = null;
        ok = false;
    }
}