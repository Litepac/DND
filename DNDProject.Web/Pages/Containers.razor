@page "/containers"
@inject HttpClient Http
@inject IJSRuntime JS
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations

<h3>Containers</h3>

<!-- Opret ny container -->
<EditForm Model="@newItem" OnValidSubmit="CreateAsync" class="mb-4">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row g-2">
        <div class="col-md-3">
            <label>Type</label>
            <InputText class="form-control" @bind-Value="newItem.Type" />
        </div>
        <div class="col-md-2">
            <label>Materiale</label>
            <InputSelect class="form-select" @bind-Value="newItem.Material">
                <option value="1">Plast</option>
                <option value="2">Jern</option>
            </InputSelect>
        </div>
        <div class="col-md-2">
            <label>Størrelse (L)</label>
            <InputNumber class="form-control" @bind-Value="newItem.SizeLiters" />
        </div>
        <div class="col-md-2">
            <label>Ugentlig (kg)</label>
            <InputNumber class="form-control" @bind-Value="newItem.WeeklyAmountKg" />
        </div>
        <div class="col-md-2">
            <label>Seneste fyld %</label>
            <InputNumber class="form-control" @bind-Value="newItem.LastFillPct" />
        </div>
        <div class="col-md-1 d-flex align-items-end">
            <button class="btn btn-primary w-100" type="submit">Opret</button>
        </div>
    </div>
</EditForm>

@if (items is null)
{
    <p>Henter data…</p>
}
else if (items.Count == 0)
{
    <p>Ingen containere.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Type</th>
                <th>Materiale</th>
                <th>Størrelse (L)</th>
                <th>Ugentlig (kg)</th>
                <th>Seneste fyld%</th>
                <th>Anbefaling (dage)</th>
                <th style="width:200px"></th>
            </tr>
        </thead>
        <tbody>
        @foreach (var c in items)
        {
            if (editingId == c.Id)
            {
                <tr>
                    <td>@c.Id</td>
                    <td><InputText class="form-control form-control-sm" @bind-Value="edit.Type" /></td>
                    <td>
                        <InputSelect class="form-select form-select-sm" @bind-Value="edit.Material">
                            <option value="1">Plast</option>
                            <option value="2">Jern</option>
                        </InputSelect>
                    </td>
                    <td><InputNumber class="form-control form-control-sm" @bind-Value="edit.SizeLiters" /></td>
                    <td><InputNumber class="form-control form-control-sm" @bind-Value="edit.WeeklyAmountKg" /></td>
                    <td><InputNumber class="form-control form-control-sm" @bind-Value="edit.LastFillPct" /></td>
                    <td class="text-muted">—</td>
                    <td>
                        <button class="btn btn-sm btn-success me-1" @onclick="SaveEditAsync">Gem</button>
                        <button class="btn btn-sm btn-secondary" @onclick="CancelEdit">Annuller</button>
                    </td>
                </tr>
            }
            else
            {
                <tr>
                    <td>@c.Id</td>
                    <td>@c.Type</td>
                    <td>@MaterialLabel(c.Material)</td>
                    <td>@c.SizeLiters</td>
                    <td>@c.WeeklyAmountKg</td>
                    <td>@(c.LastFillPct?.ToString("0") ?? "-")</td>
                    <td>@RecText(c.Id)</td>
                    <td>
                        <NavLink class="btn btn-sm btn-outline-primary me-1"
                                 href=@($"/containers/{c.Id}/history")>
                            Historik
                        </NavLink>
                        <button class="btn btn-sm btn-outline-secondary me-1" @onclick="() => BeginEdit(c)">Redigér</button>
                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteAsync(c.Id)">Slet</button>
                    </td>
                </tr>
            }
        }
        </tbody>
    </table>
}

@code {
    List<ContainerDto>? items;
    Dictionary<int, RecDto> recs = new();

    // DTO'er (matcher API)
    public record ContainerDto(
        int Id, string Type, int SizeLiters, double WeeklyAmountKg,
        double? LastFillPct, DateTime? LastPickupDate,
        int? PreferredPickupFrequencyDays, int? CustomerId, int Material);

    public record RecDto(double? AverageFillPct, int RecommendedFrequencyDays);

    public class NewContainerDto
    {
        [Required] public string Type { get; set; } = string.Empty;
        [Range(1, 2)] public int Material { get; set; } = 1;
        [Range(1, int.MaxValue)] public int SizeLiters { get; set; } = 1000;
        [Range(0, double.MaxValue)] public double WeeklyAmountKg { get; set; } = 0;
        [Range(0, 100)] public double? LastFillPct { get; set; }
        public int? PreferredPickupFrequencyDays { get; set; }
    }

    public class EditContainerDto
    {
        public int Id { get; set; }
        [Required] public string Type { get; set; } = string.Empty;
        [Range(1, 2)] public int Material { get; set; }
        [Range(1, int.MaxValue)] public int SizeLiters { get; set; }
        [Range(0, double.MaxValue)] public double WeeklyAmountKg { get; set; }
        [Range(0, 100)] public double? LastFillPct { get; set; }
        public int? PreferredPickupFrequencyDays { get; set; }
    }

    NewContainerDto newItem = new();
    int? editingId;
    EditContainerDto edit = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
        await LoadRecsAsync();
    }

    async Task LoadAsync()
    {
        items = await Http.GetFromJsonAsync<List<ContainerDto>>("api/containers") ?? new();
    }

    async Task LoadRecsAsync()
    {
        recs.Clear();
        foreach (var c in items!)
        {
            var r = await Http.GetFromJsonAsync<RecDto>($"api/containers/{c.Id}/recommendation");
            if (r is not null) recs[c.Id] = r;
            StateHasChanged();
        }
    }

    async Task CreateAsync()
    {
        var res = await Http.PostAsJsonAsync("api/containers", newItem);
        if (res.IsSuccessStatusCode)
        {
            newItem = new();
            await LoadAsync();
            await LoadRecsAsync();
        }
        else
        {
            Console.Error.WriteLine($"Create failed: {res.StatusCode}");
        }
    }

    void BeginEdit(ContainerDto c)
    {
        editingId = c.Id;
        edit = new EditContainerDto
        {
            Id = c.Id,
            Type = c.Type,
            Material = c.Material,
            SizeLiters = c.SizeLiters,
            WeeklyAmountKg = c.WeeklyAmountKg,
            LastFillPct = c.LastFillPct,
            PreferredPickupFrequencyDays = c.PreferredPickupFrequencyDays
        };
    }

    void CancelEdit() => editingId = null;

    async Task SaveEditAsync()
    {
        if (editingId is null) return;

        var res = await Http.PutAsJsonAsync($"api/containers/{editingId}", edit);
        if (res.IsSuccessStatusCode)
        {
            var i = items!.FindIndex(x => x.Id == editingId);
            if (i >= 0)
            {
                items![i] = items![i] with
                {
                    Type = edit.Type,
                    Material = edit.Material,
                    SizeLiters = edit.SizeLiters,
                    WeeklyAmountKg = edit.WeeklyAmountKg,
                    LastFillPct = edit.LastFillPct,
                    PreferredPickupFrequencyDays = edit.PreferredPickupFrequencyDays
                };
            }
            var r = await Http.GetFromJsonAsync<RecDto>($"api/containers/{editingId}/recommendation");
            if (r is not null) recs[editingId.Value] = r;

            editingId = null;
            StateHasChanged();
        }
        else
        {
            Console.Error.WriteLine($"Update failed: {res.StatusCode}");
        }
    }

    async Task DeleteAsync(int id)
    {
        if (!await JS.InvokeAsync<bool>("confirm", $"Slet container #{id}?")) return;

        var res = await Http.DeleteAsync($"api/containers/{id}");
        if (res.IsSuccessStatusCode)
        {
            var item = items!.FirstOrDefault(x => x.Id == id);
            if (item is not null) items!.Remove(item);
            recs.Remove(id);
            StateHasChanged();
        }
        else
        {
            var txt = await res.Content.ReadAsStringAsync();
            Console.Error.WriteLine($"Delete failed: {res.StatusCode} - {txt}");
        }
    }

    static string MaterialLabel(int m) => m switch { 1 => "Plast", 2 => "Jern", _ => m.ToString() };
    string RecText(int id) => recs.TryGetValue(id, out var r) ? $"{r.RecommendedFrequencyDays}" : "…";
}
